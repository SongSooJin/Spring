<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.ProductDao">
	
	<resultMap type="Product" id="productRowMapper">
		<result property="product_id" column="product_id"/>
		<result property="product_name" column="product_name"/>
		<result property="product_price" column="product_price"/>
	</resultMap>
	
	<insert id="insert">
		insert into product (product_name) 
		values (#{product_name})
		
 		<selectKey order="AFTER" keyProperty="product_id" resultType="int" >
			select LAST_INSERT_ID() as product_id
		</selectKey> 
	</insert>
	
	<update id="update">
		update product set product_name=#{product_name}
		where product_id=#{product_id}
	</update>
	
	<delete id="delete">
		delete from product where product_id=#{product_id}
	</delete>
	
	<select id="findAll" resultMap="productRowMapper">
		select * from product order by product_id asc
	</select>
	
	<select id="count" resultType="int">
		select count(*) from product 
	</select>

	<select id="findOne" resultType="Product">
		select * from product where product_id=#{product_id}
	</select>

	<!-- 
		쿼리문에서 >, < 기호 사용 시 에러가 발생할 때 해결 방법 3가지
		
		1. between 문법을 대신 사용한다.
		select * from emp 
		where empno between #{start} and #{end}
		order by empno asc
		
		2. 치환기호를 사용한다.
		select * from emp 
		where empno &gt;= #{start} and empno &lt;= #{end}
		order by empno asc
		
		3. CDATA Section으로 감싼다. 
		범위 안에 태그가 존재하지 않는다는 뜻이다.
	 -->

	<!-- 
		static 메소드 pageToSkip()를 호출하여 page, size 값을 주고
		skip 값을 얻어서 bind 태그 내 변수 skip에 담고 쿼리문에서 사용한다.
	 -->
	<select id="findByPageSizeUsingBind" resultMap="productRowMapper">
		<bind name="skip" value="@com.example.demo.util.MyUtil@pageToSkip(page, size)" />
		<![CDATA[
			select * from product 
			order by product_id asc 
			limit #{skip}, #{size}
		]]>
	</select>
	
	<!-- 
		trim 태그 작동방식
		1. 태그 안쪽에 문자열이 존재하면 prefix 값을 먼저 출력한다.
		2. prefix 값인 문자열 다음에 AND|OR가 나오면 삭제한다.
		
		<select id="search" resultMap="empRowMapper">
			select * from emp 
			<trim prefix="WHERE" prefixOverrides="AND|OR">
				<if test="ename != null">
					ename like CONCAT('%',#{ename},'%')
				</if>
				<if test="job != null">
					and job like CONCAT('%',#{job},'%')
				</if>
				<if test="salMin != null">
					and sal <![CDATA[>=]]> #{salMin} 
				</if>
				<if test="salMax != null">
					and sal <![CDATA[<=]]> #{salMax}
				</if>
			</trim>
		</select>
		
		CONCAT('%',#{ename},'%') 대신 bind 태그를 사용할 수 있다.
	 -->
	<select id="search" resultMap="productRowMapper">
		select * from product 
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="product_name != null">
				<bind name="patternproduct_name" value="'%' + _parameter.get('product_name') + '%'" />
				product_name like #{patternproduct_name}
			</if>
			<!-- <if test="job != null">
				<bind name="patternproduct_price" value="'%' + _parameter.get('product_price') + '%'" />
				and product_price like #{patternproduct_price}
			</if> -->
		</trim>
	</select>

</mapper>