<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- contextConfigLocation 서블릿 컨텍스트 레벨의 변수를 전달하면
		  스프링은  root-context.xml 파일을 처리하면 빈 컨테이너를 구성한다.
		 root-context 레벨의 빈 컨테이너에 전역 자원을 주로 등록한다.
		 예 : DataSource 
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	
	<!-- 웹서버가 기동할 때, ContextLoaderListener의 로직이 작동한다.
	 	 이떄, contextConfigLocation으로 전달된 요청이 처리된다.
	 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 서블릿과 서블릿 맵핑은 하나 그래서 이름을 맞춰줌 -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 
			DispatcherServlet 에게 servlet-context.xml을 파라미터로 전달한다.
			xml 을 처리하여servlet-context 레벨의 빈 컨테이너를 구성한다.
			servlet-context 레벨의 컨테이너는 root-context 레벨의 컨테이너의 자식 컨테이너로 설정된다.
			서블릿과 관련 자원(클라이언트와 대화할 때 사용해야 하는 자원)을 주로 등록한다.
			예 : 이미지 폴더 위치, 뷰(JSP) 파일 위치, 다국어 처리, 파일 업로드 관련 빈 설정  
			
			서블릿마다 컨테이너 따로 만듬 / 
		 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup> <!-- 사용자의 요청에 의해 시작되는 게 아니라. URL에서 기동하지 말고 미리 기동시켜라 -->
	</servlet>
	
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern> <!-- /* 맨처음 all /은 맨마지막 all : URL 패턴은 유니크해야함 -->
	</servlet-mapping>
	
	<servlet>
		<servlet-name>myServlet</servlet-name>
		<servlet-class>com.example.demo.servlet.HomeServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>myServlet</servlet-name>
		<!-- 
		 	확장자 패칭은 최우선적으로 판단한다.
		 -->
		<!-- <url-pattern>*.do</url-pattern> -->  <!-- /* 맨처음 all /은 맨마지막 all // *.do 앞에 있는 *은 아무글씨 넣어도됌 대신 .do해야함-->
		<url-pattern>/home.do</url-pattern>  <!-- /* 맨처음 all /은 맨마지막 all // *.do 앞에 있는 *은 아무글씨 넣어도됌 대신 .do해야함-->
	<!-- 	<url-pattern>/sales/</url-pattern> -->
	</servlet-mapping>

</web-app>
